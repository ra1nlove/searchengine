/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.buptnsrc.search.resource;  
@SuppressWarnings("all")
/** WebPage is the primary data structure  */
public class WebPage extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebPage\",\"namespace\":\"com.buptnsrc.search.resource\",\"doc\":\"WebPage is the primary data structure \",\"fields\":[{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"charset\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fetchTime\",\"type\":\"long\",\"default\":0},{\"name\":\"fetchInterval\",\"type\":\"int\",\"default\":1},{\"name\":\"retriesSinceFetch\",\"type\":\"int\",\"default\":0},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"statusCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"referrer\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"apk\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"md5\",\"type\":[\"null\",\"string\"],\"default\":null}],\"default\":null}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    URL(0, "url"),
    CHARSET(1, "charset"),
    FETCH_TIME(2, "fetchTime"),
    FETCH_INTERVAL(3, "fetchInterval"),
    RETRIES_SINCE_FETCH(4, "retriesSinceFetch"),
    STATUS(5, "status"),
    STATUS_CODE(6, "statusCode"),
    REFERRER(7, "referrer"),
    APK(8, "apk"),
    MD5(9, "md5"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "url",
  "charset",
  "fetchTime",
  "fetchInterval",
  "retriesSinceFetch",
  "status",
  "statusCode",
  "referrer",
  "apk",
  "md5",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return WebPage._ALL_FIELDS.length;
  }

  private CharSequence url;
  private CharSequence charset;
  private long fetchTime;
  private int fetchInterval;
  private int retriesSinceFetch;
  private CharSequence status;
  private CharSequence statusCode;
  private CharSequence referrer;
  private CharSequence apk;
  private CharSequence md5;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return url;
    case 1: return charset;
    case 2: return fetchTime;
    case 3: return fetchInterval;
    case 4: return retriesSinceFetch;
    case 5: return status;
    case 6: return statusCode;
    case 7: return referrer;
    case 8: return apk;
    case 9: return md5;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value) {
    switch (field$) {
    case 0: url = (CharSequence)(value); break;
    case 1: charset = (CharSequence)(value); break;
    case 2: fetchTime = (Long)(value); break;
    case 3: fetchInterval = (Integer)(value); break;
    case 4: retriesSinceFetch = (Integer)(value); break;
    case 5: status = (CharSequence)(value); break;
    case 6: statusCode = (CharSequence)(value); break;
    case 7: referrer = (CharSequence)(value); break;
    case 8: apk = (CharSequence)(value); break;
    case 9: md5 = (CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'url' field.
   */
  public CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(CharSequence value) {
    this.url = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'url' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUrlDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'charset' field.
   */
  public CharSequence getCharset() {
    return charset;
  }

  /**
   * Sets the value of the 'charset' field.
   * @param value the value to set.
   */
  public void setCharset(CharSequence value) {
    this.charset = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'charset' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCharsetDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'fetchTime' field.
   */
  public Long getFetchTime() {
    return fetchTime;
  }

  /**
   * Sets the value of the 'fetchTime' field.
   * @param value the value to set.
   */
  public void setFetchTime(Long value) {
    this.fetchTime = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'fetchTime' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFetchTimeDirty() {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'fetchInterval' field.
   */
  public Integer getFetchInterval() {
    return fetchInterval;
  }

  /**
   * Sets the value of the 'fetchInterval' field.
   * @param value the value to set.
   */
  public void setFetchInterval(Integer value) {
    this.fetchInterval = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFetchIntervalDirty() {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'retriesSinceFetch' field.
   */
  public Integer getRetriesSinceFetch() {
    return retriesSinceFetch;
  }

  /**
   * Sets the value of the 'retriesSinceFetch' field.
   * @param value the value to set.
   */
  public void setRetriesSinceFetch(Integer value) {
    this.retriesSinceFetch = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'retriesSinceFetch' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isRetriesSinceFetchDirty() {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'status' field.
   */
  public CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(CharSequence value) {
    this.status = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusDirty() {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'statusCode' field.
   */
  public CharSequence getStatusCode() {
    return statusCode;
  }

  /**
   * Sets the value of the 'statusCode' field.
   * @param value the value to set.
   */
  public void setStatusCode(CharSequence value) {
    this.statusCode = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'statusCode' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusCodeDirty() {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'referrer' field.
   */
  public CharSequence getReferrer() {
    return referrer;
  }

  /**
   * Sets the value of the 'referrer' field.
   * @param value the value to set.
   */
  public void setReferrer(CharSequence value) {
    this.referrer = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'referrer' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isReferrerDirty() {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'apk' field.
   */
  public CharSequence getApk() {
    return apk;
  }

  /**
   * Sets the value of the 'apk' field.
   * @param value the value to set.
   */
  public void setApk(CharSequence value) {
    this.apk = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'apk' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isApkDirty() {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'md5' field.
   */
  public CharSequence getMd5() {
    return md5;
  }

  /**
   * Sets the value of the 'md5' field.
   * @param value the value to set.
   */
  public void setMd5(CharSequence value) {
    this.md5 = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'md5' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isMd5Dirty() {
    return isDirty(9);
  }

  /** Creates a new WebPage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new WebPage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new WebPage RecordBuilder by copying an existing WebPage instance */
  public static Builder newBuilder(WebPage other) {
    return new Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for WebPage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebPage>
    implements org.apache.avro.data.RecordBuilder<WebPage> {

    private CharSequence url;
    private CharSequence charset;
    private long fetchTime;
    private int fetchInterval;
    private int retriesSinceFetch;
    private CharSequence status;
    private CharSequence statusCode;
    private CharSequence referrer;
    private CharSequence apk;
    private CharSequence md5;

    /** Creates a new Builder */
    private Builder() {
      super(WebPage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing WebPage instance */
    private Builder(WebPage other) {
            super(WebPage.SCHEMA$);
      if (isValidValue(fields()[0], other.url)) {
        this.url = (CharSequence) data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.charset)) {
        this.charset = (CharSequence) data().deepCopy(fields()[1].schema(), other.charset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fetchTime)) {
        this.fetchTime = (Long) data().deepCopy(fields()[2].schema(), other.fetchTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fetchInterval)) {
        this.fetchInterval = (Integer) data().deepCopy(fields()[3].schema(), other.fetchInterval);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.retriesSinceFetch)) {
        this.retriesSinceFetch = (Integer) data().deepCopy(fields()[4].schema(), other.retriesSinceFetch);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = (CharSequence) data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.statusCode)) {
        this.statusCode = (CharSequence) data().deepCopy(fields()[6].schema(), other.statusCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.referrer)) {
        this.referrer = (CharSequence) data().deepCopy(fields()[7].schema(), other.referrer);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.apk)) {
        this.apk = (CharSequence) data().deepCopy(fields()[8].schema(), other.apk);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.md5)) {
        this.md5 = (CharSequence) data().deepCopy(fields()[9].schema(), other.md5);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'url' field */
    public CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public Builder setUrl(CharSequence value) {
      validate(fields()[0], value);
      this.url = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'url' field */
    public Builder clearUrl() {
      url = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'charset' field */
    public CharSequence getCharset() {
      return charset;
    }
    
    /** Sets the value of the 'charset' field */
    public Builder setCharset(CharSequence value) {
      validate(fields()[1], value);
      this.charset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'charset' field has been set */
    public boolean hasCharset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'charset' field */
    public Builder clearCharset() {
      charset = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'fetchTime' field */
    public Long getFetchTime() {
      return fetchTime;
    }
    
    /** Sets the value of the 'fetchTime' field */
    public Builder setFetchTime(long value) {
      validate(fields()[2], value);
      this.fetchTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fetchTime' field has been set */
    public boolean hasFetchTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fetchTime' field */
    public Builder clearFetchTime() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'fetchInterval' field */
    public Integer getFetchInterval() {
      return fetchInterval;
    }
    
    /** Sets the value of the 'fetchInterval' field */
    public Builder setFetchInterval(int value) {
      validate(fields()[3], value);
      this.fetchInterval = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'fetchInterval' field has been set */
    public boolean hasFetchInterval() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'fetchInterval' field */
    public Builder clearFetchInterval() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'retriesSinceFetch' field */
    public Integer getRetriesSinceFetch() {
      return retriesSinceFetch;
    }
    
    /** Sets the value of the 'retriesSinceFetch' field */
    public Builder setRetriesSinceFetch(int value) {
      validate(fields()[4], value);
      this.retriesSinceFetch = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'retriesSinceFetch' field has been set */
    public boolean hasRetriesSinceFetch() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'retriesSinceFetch' field */
    public Builder clearRetriesSinceFetch() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'status' field */
    public CharSequence getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public Builder setStatus(CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'status' field */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'statusCode' field */
    public CharSequence getStatusCode() {
      return statusCode;
    }
    
    /** Sets the value of the 'statusCode' field */
    public Builder setStatusCode(CharSequence value) {
      validate(fields()[6], value);
      this.statusCode = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'statusCode' field has been set */
    public boolean hasStatusCode() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'statusCode' field */
    public Builder clearStatusCode() {
      statusCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'referrer' field */
    public CharSequence getReferrer() {
      return referrer;
    }
    
    /** Sets the value of the 'referrer' field */
    public Builder setReferrer(CharSequence value) {
      validate(fields()[7], value);
      this.referrer = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'referrer' field has been set */
    public boolean hasReferrer() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'referrer' field */
    public Builder clearReferrer() {
      referrer = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'apk' field */
    public CharSequence getApk() {
      return apk;
    }
    
    /** Sets the value of the 'apk' field */
    public Builder setApk(CharSequence value) {
      validate(fields()[8], value);
      this.apk = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'apk' field has been set */
    public boolean hasApk() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'apk' field */
    public Builder clearApk() {
      apk = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'md5' field */
    public CharSequence getMd5() {
      return md5;
    }
    
    /** Sets the value of the 'md5' field */
    public Builder setMd5(CharSequence value) {
      validate(fields()[9], value);
      this.md5 = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'md5' field has been set */
    public boolean hasMd5() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'md5' field */
    public Builder clearMd5() {
      md5 = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    @Override
    public WebPage build() {
      try {
        WebPage record = new WebPage();
        record.url = fieldSetFlags()[0] ? this.url : (CharSequence) defaultValue(fields()[0]);
        record.charset = fieldSetFlags()[1] ? this.charset : (CharSequence) defaultValue(fields()[1]);
        record.fetchTime = fieldSetFlags()[2] ? this.fetchTime : (Long) defaultValue(fields()[2]);
        record.fetchInterval = fieldSetFlags()[3] ? this.fetchInterval : (Integer) defaultValue(fields()[3]);
        record.retriesSinceFetch = fieldSetFlags()[4] ? this.retriesSinceFetch : (Integer) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (CharSequence) defaultValue(fields()[5]);
        record.statusCode = fieldSetFlags()[6] ? this.statusCode : (CharSequence) defaultValue(fields()[6]);
        record.referrer = fieldSetFlags()[7] ? this.referrer : (CharSequence) defaultValue(fields()[7]);
        record.apk = fieldSetFlags()[8] ? this.apk : (CharSequence) defaultValue(fields()[8]);
        record.md5 = fieldSetFlags()[9] ? this.md5 : (CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public WebPage newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends WebPage implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'url' field.
		   */
	  public CharSequence getUrl() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'url' field.
		   * @param value the value to set.
	   */
	  public void setUrl(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'url' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUrlDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'charset' field.
		   */
	  public CharSequence getCharset() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'charset' field.
		   * @param value the value to set.
	   */
	  public void setCharset(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'charset' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCharsetDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fetchTime' field.
		   */
	  public Long getFetchTime() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fetchTime' field.
		   * @param value the value to set.
	   */
	  public void setFetchTime(Long value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fetchTime' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFetchTimeDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fetchInterval' field.
		   */
	  public Integer getFetchInterval() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fetchInterval' field.
		   * @param value the value to set.
	   */
	  public void setFetchInterval(Integer value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFetchIntervalDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'retriesSinceFetch' field.
		   */
	  public Integer getRetriesSinceFetch() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'retriesSinceFetch' field.
		   * @param value the value to set.
	   */
	  public void setRetriesSinceFetch(Integer value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'retriesSinceFetch' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isRetriesSinceFetchDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'status' field.
		   */
	  public CharSequence getStatus() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'status' field.
		   * @param value the value to set.
	   */
	  public void setStatus(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'statusCode' field.
		   */
	  public CharSequence getStatusCode() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'statusCode' field.
		   * @param value the value to set.
	   */
	  public void setStatusCode(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'statusCode' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusCodeDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'referrer' field.
		   */
	  public CharSequence getReferrer() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'referrer' field.
		   * @param value the value to set.
	   */
	  public void setReferrer(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'referrer' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isReferrerDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'apk' field.
		   */
	  public CharSequence getApk() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'apk' field.
		   * @param value the value to set.
	   */
	  public void setApk(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'apk' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isApkDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'md5' field.
		   */
	  public CharSequence getMd5() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'md5' field.
		   * @param value the value to set.
	   */
	  public void setMd5(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'md5' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isMd5Dirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}


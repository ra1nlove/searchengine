/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.buptnsrc.search.resource;  
@SuppressWarnings("all")
/** WebPage is the primary data structure  */
public class WebPage extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebPage\",\"namespace\":\"com.buptnsrc.search.resource\",\"doc\":\"WebPage is the primary data structure \",\"fields\":[{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"charset\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fetchTime\",\"type\":\"long\",\"default\":0},{\"name\":\"fetchInterval\",\"type\":\"int\",\"default\":1},{\"name\":\"retriesSinceFetch\",\"type\":\"int\",\"default\":0},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"statusCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"simhash\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"keywords\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"h1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"content\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"outlinks\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"]},\"default\":{}},{\"name\":\"relate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bayes\",\"type\":\"double\",\"default\":0},{\"name\":\"pagerank\",\"type\":\"double\",\"default\":1},{\"name\":\"scores\",\"type\":\"double\",\"default\":0}],\"default\":null}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    URL(0, "url"),
    CHARSET(1, "charset"),
    FETCH_TIME(2, "fetchTime"),
    FETCH_INTERVAL(3, "fetchInterval"),
    RETRIES_SINCE_FETCH(4, "retriesSinceFetch"),
    STATUS(5, "status"),
    STATUS_CODE(6, "statusCode"),
    SIMHASH(7, "simhash"),
    TYPE(8, "type"),
    KEYWORDS(9, "keywords"),
    DESCRIPTION(10, "description"),
    TITLE(11, "title"),
    H1(12, "h1"),
    CONTENT(13, "content"),
    OUTLINKS(14, "outlinks"),
    RELATE(15, "relate"),
    BAYES(16, "bayes"),
    PAGERANK(17, "pagerank"),
    SCORES(18, "scores"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "url",
  "charset",
  "fetchTime",
  "fetchInterval",
  "retriesSinceFetch",
  "status",
  "statusCode",
  "simhash",
  "type",
  "keywords",
  "description",
  "title",
  "h1",
  "content",
  "outlinks",
  "relate",
  "bayes",
  "pagerank",
  "scores",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return WebPage._ALL_FIELDS.length;
  }

  private CharSequence url;
  private CharSequence charset;
  private long fetchTime;
  private int fetchInterval;
  private int retriesSinceFetch;
  private CharSequence status;
  private CharSequence statusCode;
  private CharSequence simhash;
  private CharSequence type;
  private CharSequence keywords;
  private CharSequence description;
  private CharSequence title;
  private CharSequence h1;
  private CharSequence content;
  private java.util.Map<CharSequence,CharSequence> outlinks;
  private CharSequence relate;
  private double bayes;
  private double pagerank;
  private double scores;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return url;
    case 1: return charset;
    case 2: return fetchTime;
    case 3: return fetchInterval;
    case 4: return retriesSinceFetch;
    case 5: return status;
    case 6: return statusCode;
    case 7: return simhash;
    case 8: return type;
    case 9: return keywords;
    case 10: return description;
    case 11: return title;
    case 12: return h1;
    case 13: return content;
    case 14: return outlinks;
    case 15: return relate;
    case 16: return bayes;
    case 17: return pagerank;
    case 18: return scores;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value) {
    switch (field$) {
    case 0: url = (CharSequence)(value); break;
    case 1: charset = (CharSequence)(value); break;
    case 2: fetchTime = (Long)(value); break;
    case 3: fetchInterval = (Integer)(value); break;
    case 4: retriesSinceFetch = (Integer)(value); break;
    case 5: status = (CharSequence)(value); break;
    case 6: statusCode = (CharSequence)(value); break;
    case 7: simhash = (CharSequence)(value); break;
    case 8: type = (CharSequence)(value); break;
    case 9: keywords = (CharSequence)(value); break;
    case 10: description = (CharSequence)(value); break;
    case 11: title = (CharSequence)(value); break;
    case 12: h1 = (CharSequence)(value); break;
    case 13: content = (CharSequence)(value); break;
    case 14: outlinks = (java.util.Map<CharSequence,CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)value)); break;
    case 15: relate = (CharSequence)(value); break;
    case 16: bayes = (Double)(value); break;
    case 17: pagerank = (Double)(value); break;
    case 18: scores = (Double)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'url' field.
   */
  public CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(CharSequence value) {
    this.url = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'url' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUrlDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'charset' field.
   */
  public CharSequence getCharset() {
    return charset;
  }

  /**
   * Sets the value of the 'charset' field.
   * @param value the value to set.
   */
  public void setCharset(CharSequence value) {
    this.charset = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'charset' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCharsetDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'fetchTime' field.
   */
  public Long getFetchTime() {
    return fetchTime;
  }

  /**
   * Sets the value of the 'fetchTime' field.
   * @param value the value to set.
   */
  public void setFetchTime(Long value) {
    this.fetchTime = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'fetchTime' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFetchTimeDirty() {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'fetchInterval' field.
   */
  public Integer getFetchInterval() {
    return fetchInterval;
  }

  /**
   * Sets the value of the 'fetchInterval' field.
   * @param value the value to set.
   */
  public void setFetchInterval(Integer value) {
    this.fetchInterval = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFetchIntervalDirty() {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'retriesSinceFetch' field.
   */
  public Integer getRetriesSinceFetch() {
    return retriesSinceFetch;
  }

  /**
   * Sets the value of the 'retriesSinceFetch' field.
   * @param value the value to set.
   */
  public void setRetriesSinceFetch(Integer value) {
    this.retriesSinceFetch = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'retriesSinceFetch' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isRetriesSinceFetchDirty() {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'status' field.
   */
  public CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(CharSequence value) {
    this.status = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusDirty() {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'statusCode' field.
   */
  public CharSequence getStatusCode() {
    return statusCode;
  }

  /**
   * Sets the value of the 'statusCode' field.
   * @param value the value to set.
   */
  public void setStatusCode(CharSequence value) {
    this.statusCode = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'statusCode' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusCodeDirty() {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'simhash' field.
   */
  public CharSequence getSimhash() {
    return simhash;
  }

  /**
   * Sets the value of the 'simhash' field.
   * @param value the value to set.
   */
  public void setSimhash(CharSequence value) {
    this.simhash = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'simhash' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSimhashDirty() {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'type' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTypeDirty() {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'keywords' field.
   */
  public CharSequence getKeywords() {
    return keywords;
  }

  /**
   * Sets the value of the 'keywords' field.
   * @param value the value to set.
   */
  public void setKeywords(CharSequence value) {
    this.keywords = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'keywords' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isKeywordsDirty() {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'description' field.
   */
  public CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(CharSequence value) {
    this.description = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'description' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDescriptionDirty() {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'title' field.
   */
  public CharSequence getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'title' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTitleDirty() {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'h1' field.
   */
  public CharSequence getH1() {
    return h1;
  }

  /**
   * Sets the value of the 'h1' field.
   * @param value the value to set.
   */
  public void setH1(CharSequence value) {
    this.h1 = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'h1' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isH1Dirty() {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'content' field.
   */
  public CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(CharSequence value) {
    this.content = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'content' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isContentDirty() {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'outlinks' field.
   */
  public java.util.Map<CharSequence,CharSequence> getOutlinks() {
    return outlinks;
  }

  /**
   * Sets the value of the 'outlinks' field.
   * @param value the value to set.
   */
  public void setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
    this.outlinks = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyMapWrapper(value);
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'outlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOutlinksDirty() {
    return isDirty(14);
  }

  /**
   * Gets the value of the 'relate' field.
   */
  public CharSequence getRelate() {
    return relate;
  }

  /**
   * Sets the value of the 'relate' field.
   * @param value the value to set.
   */
  public void setRelate(CharSequence value) {
    this.relate = value;
    setDirty(15);
  }
  
  /**
   * Checks the dirty status of the 'relate' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isRelateDirty() {
    return isDirty(15);
  }

  /**
   * Gets the value of the 'bayes' field.
   */
  public Double getBayes() {
    return bayes;
  }

  /**
   * Sets the value of the 'bayes' field.
   * @param value the value to set.
   */
  public void setBayes(Double value) {
    this.bayes = value;
    setDirty(16);
  }
  
  /**
   * Checks the dirty status of the 'bayes' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBayesDirty() {
    return isDirty(16);
  }

  /**
   * Gets the value of the 'pagerank' field.
   */
  public Double getPagerank() {
    return pagerank;
  }

  /**
   * Sets the value of the 'pagerank' field.
   * @param value the value to set.
   */
  public void setPagerank(Double value) {
    this.pagerank = value;
    setDirty(17);
  }
  
  /**
   * Checks the dirty status of the 'pagerank' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPagerankDirty() {
    return isDirty(17);
  }

  /**
   * Gets the value of the 'scores' field.
   */
  public Double getScores() {
    return scores;
  }

  /**
   * Sets the value of the 'scores' field.
   * @param value the value to set.
   */
  public void setScores(Double value) {
    this.scores = value;
    setDirty(18);
  }
  
  /**
   * Checks the dirty status of the 'scores' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isScoresDirty() {
    return isDirty(18);
  }

  /** Creates a new WebPage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new WebPage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new WebPage RecordBuilder by copying an existing WebPage instance */
  public static Builder newBuilder(WebPage other) {
    return new Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for WebPage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebPage>
    implements org.apache.avro.data.RecordBuilder<WebPage> {

    private CharSequence url;
    private CharSequence charset;
    private long fetchTime;
    private int fetchInterval;
    private int retriesSinceFetch;
    private CharSequence status;
    private CharSequence statusCode;
    private CharSequence simhash;
    private CharSequence type;
    private CharSequence keywords;
    private CharSequence description;
    private CharSequence title;
    private CharSequence h1;
    private CharSequence content;
    private java.util.Map<CharSequence,CharSequence> outlinks;
    private CharSequence relate;
    private double bayes;
    private double pagerank;
    private double scores;

    /** Creates a new Builder */
    private Builder() {
      super(WebPage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing WebPage instance */
    private Builder(WebPage other) {
            super(WebPage.SCHEMA$);
      if (isValidValue(fields()[0], other.url)) {
        this.url = (CharSequence) data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.charset)) {
        this.charset = (CharSequence) data().deepCopy(fields()[1].schema(), other.charset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fetchTime)) {
        this.fetchTime = (Long) data().deepCopy(fields()[2].schema(), other.fetchTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fetchInterval)) {
        this.fetchInterval = (Integer) data().deepCopy(fields()[3].schema(), other.fetchInterval);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.retriesSinceFetch)) {
        this.retriesSinceFetch = (Integer) data().deepCopy(fields()[4].schema(), other.retriesSinceFetch);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = (CharSequence) data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.statusCode)) {
        this.statusCode = (CharSequence) data().deepCopy(fields()[6].schema(), other.statusCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.simhash)) {
        this.simhash = (CharSequence) data().deepCopy(fields()[7].schema(), other.simhash);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = (CharSequence) data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.keywords)) {
        this.keywords = (CharSequence) data().deepCopy(fields()[9].schema(), other.keywords);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.description)) {
        this.description = (CharSequence) data().deepCopy(fields()[10].schema(), other.description);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.title)) {
        this.title = (CharSequence) data().deepCopy(fields()[11].schema(), other.title);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.h1)) {
        this.h1 = (CharSequence) data().deepCopy(fields()[12].schema(), other.h1);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.content)) {
        this.content = (CharSequence) data().deepCopy(fields()[13].schema(), other.content);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.outlinks)) {
        this.outlinks = (java.util.Map<CharSequence,CharSequence>) data().deepCopy(fields()[14].schema(), other.outlinks);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.relate)) {
        this.relate = (CharSequence) data().deepCopy(fields()[15].schema(), other.relate);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.bayes)) {
        this.bayes = (Double) data().deepCopy(fields()[16].schema(), other.bayes);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.pagerank)) {
        this.pagerank = (Double) data().deepCopy(fields()[17].schema(), other.pagerank);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.scores)) {
        this.scores = (Double) data().deepCopy(fields()[18].schema(), other.scores);
        fieldSetFlags()[18] = true;
      }
    }

    /** Gets the value of the 'url' field */
    public CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public Builder setUrl(CharSequence value) {
      validate(fields()[0], value);
      this.url = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'url' field */
    public Builder clearUrl() {
      url = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'charset' field */
    public CharSequence getCharset() {
      return charset;
    }
    
    /** Sets the value of the 'charset' field */
    public Builder setCharset(CharSequence value) {
      validate(fields()[1], value);
      this.charset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'charset' field has been set */
    public boolean hasCharset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'charset' field */
    public Builder clearCharset() {
      charset = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'fetchTime' field */
    public Long getFetchTime() {
      return fetchTime;
    }
    
    /** Sets the value of the 'fetchTime' field */
    public Builder setFetchTime(long value) {
      validate(fields()[2], value);
      this.fetchTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fetchTime' field has been set */
    public boolean hasFetchTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fetchTime' field */
    public Builder clearFetchTime() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'fetchInterval' field */
    public Integer getFetchInterval() {
      return fetchInterval;
    }
    
    /** Sets the value of the 'fetchInterval' field */
    public Builder setFetchInterval(int value) {
      validate(fields()[3], value);
      this.fetchInterval = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'fetchInterval' field has been set */
    public boolean hasFetchInterval() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'fetchInterval' field */
    public Builder clearFetchInterval() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'retriesSinceFetch' field */
    public Integer getRetriesSinceFetch() {
      return retriesSinceFetch;
    }
    
    /** Sets the value of the 'retriesSinceFetch' field */
    public Builder setRetriesSinceFetch(int value) {
      validate(fields()[4], value);
      this.retriesSinceFetch = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'retriesSinceFetch' field has been set */
    public boolean hasRetriesSinceFetch() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'retriesSinceFetch' field */
    public Builder clearRetriesSinceFetch() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'status' field */
    public CharSequence getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public Builder setStatus(CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'status' field */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'statusCode' field */
    public CharSequence getStatusCode() {
      return statusCode;
    }
    
    /** Sets the value of the 'statusCode' field */
    public Builder setStatusCode(CharSequence value) {
      validate(fields()[6], value);
      this.statusCode = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'statusCode' field has been set */
    public boolean hasStatusCode() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'statusCode' field */
    public Builder clearStatusCode() {
      statusCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'simhash' field */
    public CharSequence getSimhash() {
      return simhash;
    }
    
    /** Sets the value of the 'simhash' field */
    public Builder setSimhash(CharSequence value) {
      validate(fields()[7], value);
      this.simhash = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'simhash' field has been set */
    public boolean hasSimhash() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'simhash' field */
    public Builder clearSimhash() {
      simhash = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'type' field */
    public CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public Builder setType(CharSequence value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'type' field */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'keywords' field */
    public CharSequence getKeywords() {
      return keywords;
    }
    
    /** Sets the value of the 'keywords' field */
    public Builder setKeywords(CharSequence value) {
      validate(fields()[9], value);
      this.keywords = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'keywords' field has been set */
    public boolean hasKeywords() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'keywords' field */
    public Builder clearKeywords() {
      keywords = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'description' field */
    public CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public Builder setDescription(CharSequence value) {
      validate(fields()[10], value);
      this.description = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'description' field */
    public Builder clearDescription() {
      description = null;
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'title' field */
    public CharSequence getTitle() {
      return title;
    }
    
    /** Sets the value of the 'title' field */
    public Builder setTitle(CharSequence value) {
      validate(fields()[11], value);
      this.title = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'title' field has been set */
    public boolean hasTitle() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'title' field */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'h1' field */
    public CharSequence getH1() {
      return h1;
    }
    
    /** Sets the value of the 'h1' field */
    public Builder setH1(CharSequence value) {
      validate(fields()[12], value);
      this.h1 = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'h1' field has been set */
    public boolean hasH1() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'h1' field */
    public Builder clearH1() {
      h1 = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'content' field */
    public CharSequence getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public Builder setContent(CharSequence value) {
      validate(fields()[13], value);
      this.content = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'content' field */
    public Builder clearContent() {
      content = null;
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'outlinks' field */
    public java.util.Map<CharSequence,CharSequence> getOutlinks() {
      return outlinks;
    }
    
    /** Sets the value of the 'outlinks' field */
    public Builder setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[14], value);
      this.outlinks = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'outlinks' field has been set */
    public boolean hasOutlinks() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'outlinks' field */
    public Builder clearOutlinks() {
      outlinks = null;
      fieldSetFlags()[14] = false;
      return this;
    }
    
    /** Gets the value of the 'relate' field */
    public CharSequence getRelate() {
      return relate;
    }
    
    /** Sets the value of the 'relate' field */
    public Builder setRelate(CharSequence value) {
      validate(fields()[15], value);
      this.relate = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'relate' field has been set */
    public boolean hasRelate() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'relate' field */
    public Builder clearRelate() {
      relate = null;
      fieldSetFlags()[15] = false;
      return this;
    }
    
    /** Gets the value of the 'bayes' field */
    public Double getBayes() {
      return bayes;
    }
    
    /** Sets the value of the 'bayes' field */
    public Builder setBayes(double value) {
      validate(fields()[16], value);
      this.bayes = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'bayes' field has been set */
    public boolean hasBayes() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'bayes' field */
    public Builder clearBayes() {
      fieldSetFlags()[16] = false;
      return this;
    }
    
    /** Gets the value of the 'pagerank' field */
    public Double getPagerank() {
      return pagerank;
    }
    
    /** Sets the value of the 'pagerank' field */
    public Builder setPagerank(double value) {
      validate(fields()[17], value);
      this.pagerank = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'pagerank' field has been set */
    public boolean hasPagerank() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'pagerank' field */
    public Builder clearPagerank() {
      fieldSetFlags()[17] = false;
      return this;
    }
    
    /** Gets the value of the 'scores' field */
    public Double getScores() {
      return scores;
    }
    
    /** Sets the value of the 'scores' field */
    public Builder setScores(double value) {
      validate(fields()[18], value);
      this.scores = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'scores' field has been set */
    public boolean hasScores() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'scores' field */
    public Builder clearScores() {
      fieldSetFlags()[18] = false;
      return this;
    }
    
    @Override
    public WebPage build() {
      try {
        WebPage record = new WebPage();
        record.url = fieldSetFlags()[0] ? this.url : (CharSequence) defaultValue(fields()[0]);
        record.charset = fieldSetFlags()[1] ? this.charset : (CharSequence) defaultValue(fields()[1]);
        record.fetchTime = fieldSetFlags()[2] ? this.fetchTime : (Long) defaultValue(fields()[2]);
        record.fetchInterval = fieldSetFlags()[3] ? this.fetchInterval : (Integer) defaultValue(fields()[3]);
        record.retriesSinceFetch = fieldSetFlags()[4] ? this.retriesSinceFetch : (Integer) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (CharSequence) defaultValue(fields()[5]);
        record.statusCode = fieldSetFlags()[6] ? this.statusCode : (CharSequence) defaultValue(fields()[6]);
        record.simhash = fieldSetFlags()[7] ? this.simhash : (CharSequence) defaultValue(fields()[7]);
        record.type = fieldSetFlags()[8] ? this.type : (CharSequence) defaultValue(fields()[8]);
        record.keywords = fieldSetFlags()[9] ? this.keywords : (CharSequence) defaultValue(fields()[9]);
        record.description = fieldSetFlags()[10] ? this.description : (CharSequence) defaultValue(fields()[10]);
        record.title = fieldSetFlags()[11] ? this.title : (CharSequence) defaultValue(fields()[11]);
        record.h1 = fieldSetFlags()[12] ? this.h1 : (CharSequence) defaultValue(fields()[12]);
        record.content = fieldSetFlags()[13] ? this.content : (CharSequence) defaultValue(fields()[13]);
        record.outlinks = fieldSetFlags()[14] ? this.outlinks : (java.util.Map<CharSequence,CharSequence>) new org.apache.gora.persistency.impl.DirtyMapWrapper((java.util.Map)defaultValue(fields()[14]));
        record.relate = fieldSetFlags()[15] ? this.relate : (CharSequence) defaultValue(fields()[15]);
        record.bayes = fieldSetFlags()[16] ? this.bayes : (Double) defaultValue(fields()[16]);
        record.pagerank = fieldSetFlags()[17] ? this.pagerank : (Double) defaultValue(fields()[17]);
        record.scores = fieldSetFlags()[18] ? this.scores : (Double) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public WebPage newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends WebPage implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'url' field.
		   */
	  public CharSequence getUrl() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'url' field.
		   * @param value the value to set.
	   */
	  public void setUrl(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'url' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUrlDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'charset' field.
		   */
	  public CharSequence getCharset() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'charset' field.
		   * @param value the value to set.
	   */
	  public void setCharset(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'charset' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCharsetDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fetchTime' field.
		   */
	  public Long getFetchTime() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fetchTime' field.
		   * @param value the value to set.
	   */
	  public void setFetchTime(Long value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fetchTime' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFetchTimeDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fetchInterval' field.
		   */
	  public Integer getFetchInterval() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fetchInterval' field.
		   * @param value the value to set.
	   */
	  public void setFetchInterval(Integer value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFetchIntervalDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'retriesSinceFetch' field.
		   */
	  public Integer getRetriesSinceFetch() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'retriesSinceFetch' field.
		   * @param value the value to set.
	   */
	  public void setRetriesSinceFetch(Integer value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'retriesSinceFetch' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isRetriesSinceFetchDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'status' field.
		   */
	  public CharSequence getStatus() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'status' field.
		   * @param value the value to set.
	   */
	  public void setStatus(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'statusCode' field.
		   */
	  public CharSequence getStatusCode() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'statusCode' field.
		   * @param value the value to set.
	   */
	  public void setStatusCode(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'statusCode' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusCodeDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'simhash' field.
		   */
	  public CharSequence getSimhash() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'simhash' field.
		   * @param value the value to set.
	   */
	  public void setSimhash(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'simhash' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSimhashDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'type' field.
		   */
	  public CharSequence getType() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'type' field.
		   * @param value the value to set.
	   */
	  public void setType(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'type' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTypeDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'keywords' field.
		   */
	  public CharSequence getKeywords() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'keywords' field.
		   * @param value the value to set.
	   */
	  public void setKeywords(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'keywords' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isKeywordsDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'description' field.
		   */
	  public CharSequence getDescription() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'description' field.
		   * @param value the value to set.
	   */
	  public void setDescription(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'description' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDescriptionDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'title' field.
		   */
	  public CharSequence getTitle() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'title' field.
		   * @param value the value to set.
	   */
	  public void setTitle(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'title' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTitleDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'h1' field.
		   */
	  public CharSequence getH1() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'h1' field.
		   * @param value the value to set.
	   */
	  public void setH1(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'h1' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isH1Dirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'content' field.
		   */
	  public CharSequence getContent() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'content' field.
		   * @param value the value to set.
	   */
	  public void setContent(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'content' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isContentDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'outlinks' field.
		   */
	  public java.util.Map<CharSequence,CharSequence> getOutlinks() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'outlinks' field.
		   * @param value the value to set.
	   */
	  public void setOutlinks(java.util.Map<CharSequence,CharSequence> value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'outlinks' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOutlinksDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'relate' field.
		   */
	  public CharSequence getRelate() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'relate' field.
		   * @param value the value to set.
	   */
	  public void setRelate(CharSequence value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'relate' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isRelateDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'bayes' field.
		   */
	  public Double getBayes() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'bayes' field.
		   * @param value the value to set.
	   */
	  public void setBayes(Double value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'bayes' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBayesDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'pagerank' field.
		   */
	  public Double getPagerank() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'pagerank' field.
		   * @param value the value to set.
	   */
	  public void setPagerank(Double value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'pagerank' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPagerankDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'scores' field.
		   */
	  public Double getScores() {
	    throw new UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'scores' field.
		   * @param value the value to set.
	   */
	  public void setScores(Double value) {
	    throw new UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'scores' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isScoresDirty() {
	    throw new UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

